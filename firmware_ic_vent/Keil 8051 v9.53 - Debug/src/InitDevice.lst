C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Rajko\S
                    -implicityStudio\v4_workspace\firmware_ic_vent\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Rajko\SimplicityStudio\v4_w
                    -orkspace\firmware_ic_vent\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8BB3/inc) PRINT(.\src\InitDevice.lst) COND PAGEWI
                    -DTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_2_enter_DefaultMode_from_RESET();
  30   1              PORTS_3_enter_DefaultMode_from_RESET();
  31   1              PBCFG_0_enter_DefaultMode_from_RESET();
  32   1              CIP51_0_enter_DefaultMode_from_RESET();
  33   1              CLOCK_0_enter_DefaultMode_from_RESET();
  34   1              TIMER01_0_enter_DefaultMode_from_RESET();
  35   1              TIMER16_2_enter_DefaultMode_from_RESET();
  36   1              TIMER16_3_enter_DefaultMode_from_RESET();
  37   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  38   1              EXTINT_0_enter_DefaultMode_from_RESET();
  39   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  40   1              // Restore the SFRPAGE
  41   1              SFRPAGE = SFRPAGE_save;
  42   1              // [Config Calls]$
  43   1      
  44   1      }
  45          
  46          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  47   1              // $[Watchdog Timer Init Variable Declarations]
  48   1              uint32_t i;
  49   1              bool ea;
  50   1              // [Watchdog Timer Init Variable Declarations]$
  51   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 2   

  52   1              // $[WDTCN - Watchdog Timer Control]
  53   1              // Deprecated
  54   1              // [WDTCN - Watchdog Timer Control]$
  55   1      
  56   1              // $[WDTCN_2 - Watchdog Timer Control]
  57   1              SFRPAGE = 0x00;
  58   1      
  59   1              // Feed WDT timer before disabling (Erratum WDT_E102)
  60   1              WDTCN = 0xA5;
  61   1      
  62   1              // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  63   1              for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++) {
  64   2                      NOP();
  65   2              }
  66   1      
  67   1              // Disable WDT
  68   1              ea = IE_EA;
  69   1              IE_EA = 0;
  70   1              WDTCN = 0xDE;
  71   1              WDTCN = 0xAD;
  72   1              IE_EA = ea;
  73   1      
  74   1              // [WDTCN_2 - Watchdog Timer Control]$
  75   1      
  76   1      }
  77          
  78          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  79   1              // $[XBR2 - Port I/O Crossbar 2]
  80   1              /***********************************************************************
  81   1               - Weak Pullups enabled 
  82   1               - Crossbar enabled
  83   1               - UART1 I/O unavailable at Port pin
  84   1               - UART1 RTS1 unavailable at Port pin
  85   1               - UART1 CTS1 unavailable at Port pin
  86   1               ***********************************************************************/
  87   1              SFRPAGE = 0x00;
  88   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
  89   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
  90   1                              | XBR2_URT1CTSE__DISABLED;
  91   1              // [XBR2 - Port I/O Crossbar 2]$
  92   1      
  93   1              // $[PRTDRV - Port Drive Strength]
  94   1              // [PRTDRV - Port Drive Strength]$
  95   1      
  96   1              // $[XBR0 - Port I/O Crossbar 0]
  97   1              // [XBR0 - Port I/O Crossbar 0]$
  98   1      
  99   1              // $[XBR1 - Port I/O Crossbar 1]
 100   1              /***********************************************************************
 101   1               - All PCA I/O unavailable at Port pins
 102   1               - ECI unavailable at Port pin
 103   1               - T0 unavailable at Port pin
 104   1               - T1 unavailable at Port pin
 105   1               - T2 routed to Port pin
 106   1               ***********************************************************************/
 107   1              XBR1 = XBR1_PCA0ME__DISABLED | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 108   1                              | XBR1_T1E__DISABLED | XBR1_T2E__ENABLED;
 109   1              // [XBR1 - Port I/O Crossbar 1]$
 110   1      
 111   1      }
 112          
 113          extern void CIP51_0_enter_DefaultMode_from_RESET(void) {
 114   1              // $[PFE0CN - Prefetch Engine Control]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 3   

 115   1              /***********************************************************************
 116   1               - SYSCLK < 50 MHz
 117   1               ***********************************************************************/
 118   1              SFRPAGE = 0x10;
 119   1              PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 120   1              // [PFE0CN - Prefetch Engine Control]$
 121   1      
 122   1      }
 123          
 124          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 125   1              // $[HFOSC1 Setup]
 126   1              // Ensure SYSCLK is > 24 MHz before switching to HFOSC1
 127   1              SFRPAGE = 0x00;
 128   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 129   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 130   1                      ;
 131   1              // [HFOSC1 Setup]$
 132   1      
 133   1              // $[CLKSEL - Clock Select]
 134   1              /***********************************************************************
 135   1               - Clock derived from the Internal High Frequency Oscillator 1
 136   1               - SYSCLK is equal to selected clock source divided by 1
 137   1               ***********************************************************************/
 138   1              CLKSEL = CLKSEL_CLKSL__HFOSC1 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 139   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 140   1                      ;
 141   1              // [CLKSEL - Clock Select]$
 142   1      
 143   1      }
 144          
 145          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 146   1              // $[CKCON0 - Clock Control 0]
 147   1              /***********************************************************************
 148   1               - System clock divided by 4
 149   1               - Counter/Timer 0 uses the system clock
 150   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 151   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 152   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 153   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 154   1               - Timer 1 uses the system clock
 155   1               ***********************************************************************/
 156   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__SYSCLK
 157   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 158   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 159   1                              | CKCON0_T1M__SYSCLK;
 160   1              // [CKCON0 - Clock Control 0]$
 161   1      
 162   1              // $[CKCON1 - Clock Control 1]
 163   1              // [CKCON1 - Clock Control 1]$
 164   1      
 165   1              // $[TMOD - Timer 0/1 Mode]
 166   1              /***********************************************************************
 167   1               - Mode 1, 16-bit Counter/Timer
 168   1               - Mode 1, 16-bit Counter/Timer
 169   1               - Timer Mode
 170   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 171   1               - Timer Mode
 172   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 173   1               ***********************************************************************/
 174   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE1 | TMOD_CT0__TIMER
 175   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 176   1              // [TMOD - Timer 0/1 Mode]$
 177   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 4   

 178   1              // $[TCON - Timer 0/1 Control]
 179   1              /***********************************************************************
 180   1               - INT0 is edge triggered
 181   1               - INT1 is edge triggered
 182   1               ***********************************************************************/
 183   1              TCON |= TCON_IT0__EDGE | TCON_IT1__EDGE;
 184   1              // [TCON - Timer 0/1 Control]$
 185   1      
 186   1      }
 187          
 188          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 189   1              // $[PCA Off]
 190   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 191   1              // [PCA Off]$
 192   1      
 193   1              // $[PCA0MD - PCA Mode]
 194   1              /***********************************************************************
 195   1               - PCA continues to function normally while the system controller is in
 196   1               Idle Mode
 197   1               - Disable the CF interrupt
 198   1               - Timer 0 overflow
 199   1               ***********************************************************************/
 200   1              PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 201   1                              | PCA0MD_CPS__T0_OVERFLOW;
 202   1              // [PCA0MD - PCA Mode]$
 203   1      
 204   1              // $[PCA0CENT - PCA Center Alignment Enable]
 205   1              // [PCA0CENT - PCA Center Alignment Enable]$
 206   1      
 207   1              // $[PCA0CLR - PCA Comparator Clear Control]
 208   1              // [PCA0CLR - PCA Comparator Clear Control]$
 209   1      
 210   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 211   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 212   1      
 213   1              // $[PCA0H - PCA Counter/Timer High Byte]
 214   1              // [PCA0H - PCA Counter/Timer High Byte]$
 215   1      
 216   1              // $[PCA0POL - PCA Output Polarity]
 217   1              /***********************************************************************
 218   1               - Invert polarity
 219   1               - Invert polarity
 220   1               - Invert polarity
 221   1               - Invert polarity
 222   1               - Invert polarity
 223   1               - Invert polarity
 224   1               ***********************************************************************/
 225   1              PCA0POL = PCA0POL_CEX0POL__INVERT | PCA0POL_CEX1POL__INVERT
 226   1                              | PCA0POL_CEX2POL__INVERT | PCA0POL_CEX3POL__INVERT
 227   1                              | PCA0POL_CEX4POL__INVERT | PCA0POL_CEX5POL__INVERT;
 228   1              // [PCA0POL - PCA Output Polarity]$
 229   1      
 230   1              // $[PCA0PWM - PCA PWM Configuration]
 231   1              // [PCA0PWM - PCA PWM Configuration]$
 232   1      
 233   1              // $[PCA On]
 234   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 235   1              // [PCA On]$
 236   1      
 237   1      }
 238          
 239          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 240   1              // $[Timer Initialization]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 5   

 241   1              //Save Timer Configuration
 242   1              uint8_t TCON_save;
 243   1              TCON_save = TCON;
 244   1              //Stop Timers
 245   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 246   1      
 247   1              // [Timer Initialization]$
 248   1      
 249   1              // $[TH0 - Timer 0 High Byte]
 250   1              // [TH0 - Timer 0 High Byte]$
 251   1      
 252   1              // $[TL0 - Timer 0 Low Byte]
 253   1              // [TL0 - Timer 0 Low Byte]$
 254   1      
 255   1              // $[TH1 - Timer 1 High Byte]
 256   1              // [TH1 - Timer 1 High Byte]$
 257   1      
 258   1              // $[TL1 - Timer 1 Low Byte]
 259   1              // [TL1 - Timer 1 Low Byte]$
 260   1      
 261   1              // $[Timer Restoration]
 262   1              //Restore Timer Configuration
 263   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 264   1      
 265   1              // [Timer Restoration]$
 266   1      
 267   1      }
 268          
 269          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 270   1              // $[PCA0 Settings Save]
 271   1              // Select Capture/Compare register)
 272   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 273   1              // [PCA0 Settings Save]$
 274   1      
 275   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 276   1              /***********************************************************************
 277   1               - Disable negative edge capture
 278   1               - Disable CCF0 interrupts
 279   1               - Disable match function
 280   1               - 8 to 11-bit PWM selected
 281   1               - Disable positive edge capture
 282   1               - Enable comparator function
 283   1               - Enable PWM function
 284   1               - Disable toggle function
 285   1               ***********************************************************************/
 286   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 287   1                              | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT
 288   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 289   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 290   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 291   1      
 292   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 293   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 294   1      
 295   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 296   1              PCA0CPH0 = 0x00;
 297   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 298   1      
 299   1              // $[Auto-reload]
 300   1              // [Auto-reload]$
 301   1      
 302   1              // $[PCA0 Settings Restore]
 303   1              // [PCA0 Settings Restore]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 6   

 304   1      
 305   1      }
 306          
 307          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 308   1              // $[PCA0 Settings Save]
 309   1              // Select Capture/Compare register)
 310   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 311   1              // [PCA0 Settings Save]$
 312   1      
 313   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 314   1              /***********************************************************************
 315   1               - Disable negative edge capture
 316   1               - Disable CCF1 interrupts
 317   1               - Disable match function
 318   1               - 8 to 11-bit PWM selected
 319   1               - Disable positive edge capture
 320   1               - Enable comparator function
 321   1               - Enable PWM function
 322   1               - Disable toggle function
 323   1               ***********************************************************************/
 324   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__DISABLED
 325   1                              | PCA0CPM1_MAT__DISABLED | PCA0CPM1_PWM16__8_BIT
 326   1                              | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__ENABLED
 327   1                              | PCA0CPM1_PWM__ENABLED | PCA0CPM1_TOG__DISABLED;
 328   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 329   1      
 330   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 331   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 332   1      
 333   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 334   1              PCA0CPH1 = 0x00;
 335   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 336   1      
 337   1              // $[Auto-reload]
 338   1              // [Auto-reload]$
 339   1      
 340   1              // $[PCA0 Settings Restore]
 341   1              // [PCA0 Settings Restore]$
 342   1      
 343   1      }
 344          
 345          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
 346   1              // $[PCA0 Settings Save]
 347   1              // Select Capture/Compare register)
 348   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 349   1              // [PCA0 Settings Save]$
 350   1      
 351   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 352   1              /***********************************************************************
 353   1               - Disable negative edge capture
 354   1               - Disable CCF2 interrupts
 355   1               - Disable match function
 356   1               - 8 to 11-bit PWM selected
 357   1               - Disable positive edge capture
 358   1               - Enable comparator function
 359   1               - Enable PWM function
 360   1               - Disable toggle function
 361   1               ***********************************************************************/
 362   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 363   1                              | PCA0CPM2_MAT__DISABLED | PCA0CPM2_PWM16__8_BIT
 364   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__ENABLED
 365   1                              | PCA0CPM2_PWM__ENABLED | PCA0CPM2_TOG__DISABLED;
 366   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 7   

 367   1      
 368   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 369   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 370   1      
 371   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 372   1              PCA0CPH2 = 0x00;
 373   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 374   1      
 375   1              // $[Auto-reload]
 376   1              // [Auto-reload]$
 377   1      
 378   1              // $[PCA0 Settings Restore]
 379   1              // [PCA0 Settings Restore]$
 380   1      
 381   1      }
 382          
 383          extern void PCACH_3_enter_DefaultMode_from_RESET(void) {
 384   1              // $[PCA0 Settings Save]
 385   1              // Select Capture/Compare register)
 386   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 387   1              // [PCA0 Settings Save]$
 388   1      
 389   1              // $[PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]
 390   1              /***********************************************************************
 391   1               - Disable negative edge capture
 392   1               - Disable CCF3 interrupts
 393   1               - Disable match function
 394   1               - 8 to 11-bit PWM selected
 395   1               - Disable positive edge capture
 396   1               - Enable comparator function
 397   1               - Enable PWM function
 398   1               - Disable toggle function
 399   1               ***********************************************************************/
 400   1              PCA0CPM3 = PCA0CPM3_CAPN__DISABLED | PCA0CPM3_ECCF__DISABLED
 401   1                              | PCA0CPM3_MAT__DISABLED | PCA0CPM3_PWM16__8_BIT
 402   1                              | PCA0CPM3_CAPP__DISABLED | PCA0CPM3_ECOM__ENABLED
 403   1                              | PCA0CPM3_PWM__ENABLED | PCA0CPM3_TOG__DISABLED;
 404   1              // [PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]$
 405   1      
 406   1              // $[PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]
 407   1              // [PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]$
 408   1      
 409   1              // $[PCA0CPH3 - PCA Channel 3 Capture Module High Byte]
 410   1              PCA0CPH3 = 0x00;
 411   1              // [PCA0CPH3 - PCA Channel 3 Capture Module High Byte]$
 412   1      
 413   1              // $[Auto-reload]
 414   1              // [Auto-reload]$
 415   1      
 416   1              // $[PCA0 Settings Restore]
 417   1              // [PCA0 Settings Restore]$
 418   1      
 419   1      }
 420          
 421          extern void PCACH_4_enter_DefaultMode_from_RESET(void) {
 422   1              // $[PCA0 Settings Save]
 423   1              // Select Capture/Compare register)
 424   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 425   1              // [PCA0 Settings Save]$
 426   1      
 427   1              // $[PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]
 428   1              /***********************************************************************
 429   1               - Disable negative edge capture
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 8   

 430   1               - Disable CCF4 interrupts
 431   1               - Disable match function
 432   1               - 8 to 11-bit PWM selected
 433   1               - Disable positive edge capture
 434   1               - Enable comparator function
 435   1               - Enable PWM function
 436   1               - Disable toggle function
 437   1               ***********************************************************************/
 438   1              PCA0CPM4 = PCA0CPM4_CAPN__DISABLED | PCA0CPM4_ECCF__DISABLED
 439   1                              | PCA0CPM4_MAT__DISABLED | PCA0CPM4_PWM16__8_BIT
 440   1                              | PCA0CPM4_CAPP__DISABLED | PCA0CPM4_ECOM__ENABLED
 441   1                              | PCA0CPM4_PWM__ENABLED | PCA0CPM4_TOG__DISABLED;
 442   1              // [PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]$
 443   1      
 444   1              // $[PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]
 445   1              // [PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]$
 446   1      
 447   1              // $[PCA0CPH4 - PCA Channel 4 Capture Module High Byte]
 448   1              PCA0CPH4 = 0x00;
 449   1              // [PCA0CPH4 - PCA Channel 4 Capture Module High Byte]$
 450   1      
 451   1              // $[Auto-reload]
 452   1              // [Auto-reload]$
 453   1      
 454   1              // $[PCA0 Settings Restore]
 455   1              // [PCA0 Settings Restore]$
 456   1      
 457   1      }
 458          
 459          extern void PCACH_5_enter_DefaultMode_from_RESET(void) {
 460   1              // $[PCA0 Settings Save]
 461   1              // Select Capture/Compare register)
 462   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 463   1              // [PCA0 Settings Save]$
 464   1      
 465   1              // $[PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]
 466   1              /***********************************************************************
 467   1               - Disable negative edge capture
 468   1               - Disable CCF5 interrupts
 469   1               - Disable match function
 470   1               - 8 to 11-bit PWM selected
 471   1               - Disable positive edge capture
 472   1               - Enable comparator function
 473   1               - Enable PWM function
 474   1               - Disable toggle function
 475   1               ***********************************************************************/
 476   1              PCA0CPM5 = PCA0CPM5_CAPN__DISABLED | PCA0CPM5_ECCF__DISABLED
 477   1                              | PCA0CPM5_MAT__DISABLED | PCA0CPM5_PWM16__8_BIT
 478   1                              | PCA0CPM5_CAPP__DISABLED | PCA0CPM5_ECOM__ENABLED
 479   1                              | PCA0CPM5_PWM__ENABLED | PCA0CPM5_TOG__DISABLED;
 480   1              // [PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]$
 481   1      
 482   1              // $[PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]
 483   1              // [PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]$
 484   1      
 485   1              // $[PCA0CPH5 - PCA Channel 5 Capture Module High Byte]
 486   1              PCA0CPH5 = 0x00;
 487   1              // [PCA0CPH5 - PCA Channel 5 Capture Module High Byte]$
 488   1      
 489   1              // $[Auto-reload]
 490   1              // [Auto-reload]$
 491   1      
 492   1              // $[PCA0 Settings Restore]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 9   

 493   1              // [PCA0 Settings Restore]$
 494   1      
 495   1      }
 496          
 497          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 498   1              // $[P0 - Port 0 Pin Latch]
 499   1              /***********************************************************************
 500   1               - P0.0 is high. Set P0.0 to drive or float high
 501   1               - P0.1 is high. Set P0.1 to drive or float high
 502   1               - P0.2 is high. Set P0.2 to drive or float high
 503   1               - P0.3 is high. Set P0.3 to drive or float high
 504   1               - P0.4 is high. Set P0.4 to drive or float high
 505   1               - P0.5 is high. Set P0.5 to drive or float high
 506   1               - P0.6 is low. Set P0.6 to drive low
 507   1               - P0.7 is low. Set P0.7 to drive low
 508   1               ***********************************************************************/
 509   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__HIGH | P0_B4__HIGH
 510   1                              | P0_B5__HIGH | P0_B6__LOW | P0_B7__LOW;
 511   1              // [P0 - Port 0 Pin Latch]$
 512   1      
 513   1              // $[P0MDOUT - Port 0 Output Mode]
 514   1              /***********************************************************************
 515   1               - P0.0 output is open-drain
 516   1               - P0.1 output is open-drain
 517   1               - P0.2 output is open-drain
 518   1               - P0.3 output is open-drain
 519   1               - P0.4 output is open-drain
 520   1               - P0.5 output is open-drain
 521   1               - P0.6 output is push-pull
 522   1               - P0.7 output is push-pull
 523   1               ***********************************************************************/
 524   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 525   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 526   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
 527   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__PUSH_PULL;
 528   1              // [P0MDOUT - Port 0 Output Mode]$
 529   1      
 530   1              // $[P0MDIN - Port 0 Input Mode]
 531   1              // [P0MDIN - Port 0 Input Mode]$
 532   1              P0MDIN |= P0MDIN_B2__DIGITAL;
 533   1      
 534   1              // $[P0SKIP - Port 0 Skip]
 535   1              /***********************************************************************
 536   1               - P0.0 pin is skipped by the crossbar
 537   1               - P0.1 pin is skipped by the crossbar
 538   1               - P0.2 pin is not skipped by the crossbar
 539   1               - P0.3 pin is skipped by the crossbar
 540   1               - P0.4 pin is not skipped by the crossbar
 541   1               - P0.5 pin is not skipped by the crossbar
 542   1               - P0.6 pin is skipped by the crossbar
 543   1               - P0.7 pin is skipped by the crossbar
 544   1               ***********************************************************************/
 545   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__NOT_SKIPPED
 546   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED
 547   1                              | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
 548   1              // [P0SKIP - Port 0 Skip]$
 549   1      
 550   1              // $[P0MASK - Port 0 Mask]
 551   1              // [P0MASK - Port 0 Mask]$
 552   1      
 553   1              // $[P0MAT - Port 0 Match]
 554   1              // [P0MAT - Port 0 Match]$
 555   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 10  

 556   1      }
 557          
 558          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 559   1              // $[P1 - Port 1 Pin Latch]
 560   1              // [P1 - Port 1 Pin Latch]$
 561   1      
 562   1              // $[P1MDOUT - Port 1 Output Mode]
 563   1              /***********************************************************************
 564   1               - P1.0 output is open-drain
 565   1               - P1.1 output is push-pull
 566   1               - P1.2 output is push-pull
 567   1               - P1.3 output is open-drain
 568   1               - P1.4 output is open-drain
 569   1               - P1.5 output is open-drain
 570   1               - P1.6 output is open-drain
 571   1               - P1.7 output is open-drain
 572   1               ***********************************************************************/
 573   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__PUSH_PULL
 574   1                              | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__OPEN_DRAIN
 575   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 576   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 577   1              // [P1MDOUT - Port 1 Output Mode]$
 578   1      
 579   1              // $[P1MDIN - Port 1 Input Mode]
 580   1              // [P1MDIN - Port 1 Input Mode]$
 581   1              P1MDIN |= P1MDIN_B0__DIGITAL;
 582   1              P1MDIN |= P1MDIN_B3__DIGITAL;
 583   1      
 584   1              // $[P1SKIP - Port 1 Skip]
 585   1              /***********************************************************************
 586   1               - P1.0 pin is skipped by the crossbar
 587   1               - P1.1 pin is skipped by the crossbar
 588   1               - P1.2 pin is skipped by the crossbar
 589   1               - P1.3 pin is skipped by the crossbar
 590   1               - P1.4 pin is skipped by the crossbar
 591   1               - P1.5 pin is skipped by the crossbar
 592   1               - P1.6 pin is skipped by the crossbar
 593   1               - P1.7 pin is skipped by the crossbar
 594   1               ***********************************************************************/
 595   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 596   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED
 597   1                              | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 598   1              // [P1SKIP - Port 1 Skip]$
 599   1      
 600   1              // $[P1MASK - Port 1 Mask]
 601   1              // [P1MASK - Port 1 Mask]$
 602   1      
 603   1              // $[P1MAT - Port 1 Match]
 604   1              // [P1MAT - Port 1 Match]$
 605   1      
 606   1      }
 607          
 608          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 609   1              // $[P2 - Port 2 Pin Latch]
 610   1              // [P2 - Port 2 Pin Latch]$
 611   1      
 612   1              // $[P2MDOUT - Port 2 Output Mode]
 613   1              // [P2MDOUT - Port 2 Output Mode]$
 614   1      
 615   1              // $[P2MDIN - Port 2 Input Mode]
 616   1              // [P2MDIN - Port 2 Input Mode]$
 617   1              SFRPAGE = 0x00;
 618   1      //      XBR2 |= XBR2_WEAKPUD__PULL_UPS_DISABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 11  

 619   1              P2MDIN |= P2MDIN_B1__DIGITAL;
 620   1              P2MDIN |= P2MDIN_B4__DIGITAL;
 621   1              P2MDIN |= P2MDIN_B5__DIGITAL;
 622   1      
 623   1              // $[P2SKIP - Port 2 Skip]
 624   1              /***********************************************************************
 625   1               - P2.0 pin is skipped by the crossbar
 626   1               - P2.1 pin is skipped by the crossbar
 627   1               - P2.2 pin is skipped by the crossbar
 628   1               - P2.3 pin is skipped by the crossbar
 629   1               ***********************************************************************/
 630   1              SFRPAGE = 0x20;
 631   1              P2SKIP = P2SKIP_B0__SKIPPED | P2SKIP_B1__SKIPPED | P2SKIP_B2__SKIPPED
 632   1                              | P2SKIP_B3__SKIPPED;
 633   1              // [P2SKIP - Port 2 Skip]$
 634   1      
 635   1              // $[P2MASK - Port 2 Mask]
 636   1              // [P2MASK - Port 2 Mask]$
 637   1      
 638   1              // $[P2MAT - Port 2 Match]
 639   1              // [P2MAT - Port 2 Match]$
 640   1      
 641   1      }
 642          
 643          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 644   1              // $[P3 - Port 3 Pin Latch]
 645   1              // [P3 - Port 3 Pin Latch]$
 646   1      
 647   1              // $[P3MDOUT - Port 3 Output Mode]
 648   1              // [P3MDOUT - Port 3 Output Mode]$
 649   1      
 650   1              // $[P3MDIN - Port 3 Input Mode]
 651   1              // [P3MDIN - Port 3 Input Mode]$
 652   1      
 653   1      }
 654          
 655          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 656   1              // $[Timer Initialization]
 657   1              // Save Timer Configuration
 658   1              uint8_t TMR2CN0_TR2_save;
 659   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 660   1              // Stop Timer
 661   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 662   1              // [Timer Initialization]$
 663   1      
 664   1              // $[TMR2CN1 - Timer 2 Control 1]
 665   1              // [TMR2CN1 - Timer 2 Control 1]$
 666   1      
 667   1              // $[TMR2CN0 - Timer 2 Control]
 668   1              // [TMR2CN0 - Timer 2 Control]$
 669   1      
 670   1              // $[TMR2H - Timer 2 High Byte]
 671   1              /***********************************************************************
 672   1               - Timer 2 High Byte = 0xF0
 673   1               ***********************************************************************/
 674   1              TMR2H = (0xF0 << TMR2H_TMR2H__SHIFT);
 675   1              // [TMR2H - Timer 2 High Byte]$
 676   1      
 677   1              // $[TMR2L - Timer 2 Low Byte]
 678   1              /***********************************************************************
 679   1               - Timer 2 Low Byte = 0x0D
 680   1               ***********************************************************************/
 681   1              TMR2L = (0x0D << TMR2L_TMR2L__SHIFT);
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 12  

 682   1              // [TMR2L - Timer 2 Low Byte]$
 683   1      
 684   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 685   1              /***********************************************************************
 686   1               - Timer 2 Reload High Byte = 0xF0
 687   1               ***********************************************************************/
 688   1              TMR2RLH = (0xF0 << TMR2RLH_TMR2RLH__SHIFT);
 689   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 690   1      
 691   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 692   1              /***********************************************************************
 693   1               - Timer 2 Reload Low Byte = 0x0D
 694   1               ***********************************************************************/
 695   1              TMR2RLL = (0x0D << TMR2RLL_TMR2RLL__SHIFT);
 696   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 697   1      
 698   1              // $[TMR2CN0]
 699   1              /***********************************************************************
 700   1               - Start Timer 2 running
 701   1               ***********************************************************************/
 702   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 703   1              // [TMR2CN0]$
 704   1      
 705   1              // $[Timer Restoration]
 706   1              // Restore Timer Configuration
 707   1              TMR2CN0 |= TMR2CN0_TR2_save;
 708   1              // [Timer Restoration]$
 709   1      }
 710          
 711          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 712   1              // $[EIE1 - Extended Interrupt Enable 1]
 713   1              /***********************************************************************
 714   1               - Disable ADC0 Conversion Complete interrupt
 715   1               - Disable ADC0 Window Comparison interrupt
 716   1               - Disable CP0 interrupts
 717   1               - Disable CP1 interrupts
 718   1               - Disable all Port Match interrupts
 719   1               - Disable all PCA0 interrupts
 720   1               - Disable all SMB0 interrupts
 721   1               - Enable interrupt requests generated by the TF3L or TF3H flags
 722   1               ***********************************************************************/
 723   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 724   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 725   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 726   1              // [EIE1 - Extended Interrupt Enable 1]$
 727   1      
 728   1              // $[EIE2 - Extended Interrupt Enable 2]
 729   1              // [EIE2 - Extended Interrupt Enable 2]$
 730   1      
 731   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 732   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 733   1      
 734   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 735   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 736   1      
 737   1              // $[EIP2 - Extended Interrupt Priority 2]
 738   1              // [EIP2 - Extended Interrupt Priority 2]$
 739   1      
 740   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 741   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 742   1      
 743   1              // $[IE - Interrupt Enable]
 744   1              /***********************************************************************
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 13  

 745   1               - Enable each interrupt according to its individual mask setting
 746   1               - Enable interrupt requests generated by the INT0 input
 747   1               - Disable external interrupt 1
 748   1               - Disable all SPI0 interrupts
 749   1               - Enable interrupt requests generated by the TF0 flag
 750   1               - Disable all Timer 1 interrupt
 751   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 752   1               - Disable UART0 interrupt
 753   1               ***********************************************************************/
 754   1              IE = IE_EA__ENABLED | IE_EX0__ENABLED | IE_EX1__DISABLED
 755   1                              | IE_ESPI0__DISABLED | IE_ET0__ENABLED | IE_ET1__DISABLED
 756   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 757   1              // [IE - Interrupt Enable]$
 758   1      
 759   1              // $[IP - Interrupt Priority]
 760   1              // [IP - Interrupt Priority]$
 761   1      
 762   1              // $[IPH - Interrupt Priority High]
 763   1              // [IPH - Interrupt Priority High]$
 764   1      
 765   1      }
 766          
 767          extern void EXTINT_0_enter_DefaultMode_from_RESET(void) {
 768   1              // $[IT01CF - INT0/INT1 Configuration]
 769   1              /***********************************************************************
 770   1               - INT0 input is active low
 771   1               - Select P0.2
 772   1               - INT1 input is active low
 773   1               - Select P0.0
 774   1               ***********************************************************************/
 775   1              IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_2
 776   1                              | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_0;
 777   1              // [IT01CF - INT0/INT1 Configuration]$
 778   1              TCON |= TCON_IT0__EDGE;
 779   1      
 780   1      }
 781          
 782          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 783   1              // $[Timer Initialization]
 784   1              // Save Timer Configuration
 785   1              uint8_t TMR3CN0_TR3_save;
 786   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 787   1              // Stop Timer
 788   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 789   1              // [Timer Initialization]$
 790   1      
 791   1              // $[TMR3CN1 - Timer 3 Control 1]
 792   1              /***********************************************************************
 793   1               - Capture high-to-low transitions on the T2 input pin
 794   1               - Timer will only reload on overflow events
 795   1               - Suspend Timer Synchronization Status = 0x00
 796   1               ***********************************************************************/
 797   1              SFRPAGE = 0x10;
 798   1              TMR3CN1 = TMR3CN1_T3CSEL__PIN | TMR3CN1_RLFSEL__NONE
 799   1                              | (0x00 << TMR3CN1_STSYNC__SHIFT);
 800   1              // [TMR3CN1 - Timer 3 Control 1]$
 801   1      
 802   1              // $[TMR3CN0 - Timer 3 Control]
 803   1              /***********************************************************************
 804   1               - Enable capture mode
 805   1               ***********************************************************************/
 806   1              SFRPAGE = 0x00;
 807   1              TMR3CN0 |= TMR3CN0_TF3CEN__ENABLED;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/07/2023 15:31:49 PAGE 14  

 808   1              // [TMR3CN0 - Timer 3 Control]$
 809   1      
 810   1              // $[TMR3H - Timer 3 High Byte]
 811   1              // [TMR3H - Timer 3 High Byte]$
 812   1      
 813   1              // $[TMR3L - Timer 3 Low Byte]
 814   1              // [TMR3L - Timer 3 Low Byte]$
 815   1      
 816   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 817   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 818   1      
 819   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 820   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 821   1      
 822   1              // $[TMR3CN0]
 823   1              /***********************************************************************
 824   1               - Start Timer 3 running
 825   1               ***********************************************************************/
 826   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 827   1              // [TMR3CN0]$
 828   1      
 829   1              // $[Timer Restoration]
 830   1              // Restore Timer Configuration
 831   1              TMR3CN0 |= TMR3CN0_TR3_save;
 832   1              // [Timer Restoration]$
 833   1      
 834   1      }
 835          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    369    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
